version: '3.7'
services:

  ### DB START
  # This is the database to which the all the other components in the stack will connect and interact with
  # (but mostly it's PostgREST that is going to be responsible for the bulk of the db traffic)
  # Having the database in a container is very convenient in development but in production you will
  # use a separate database instance, like Amazon RDS, i.e. in production this section will be
  # commented and in the .env file you will specify the ip of your separate database instance
  db:
    image: uklfr/zombopg:latest
    ports:
      - "5432:5432"
    environment:
      # env vars specific to postgres image used on first boot
      - POSTGRES_USER=${SUPER_USER}
      - POSTGRES_PASSWORD=${SUPER_USER_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
      # env vars useful for our sql scripts
      - SUPER_USER=${SUPER_USER}
      - SUPER_USER_PASSWORD=${SUPER_USER_PASSWORD}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      - DB_ANON_ROLE=${DB_ANON_ROLE}
      - DEVELOPMENT=${DEVELOPMENT}
      - JWT_SECRET=${JWT_SECRET}
      # FDW vars for i2b2 connnection
      - FDW_USER=${FDW_USER}
      - FDW_PASSWORD=${FDW_PASSWORD}
      - FDW_PORT=${FDW_PORT}
      - FDW_HOST=${FDW_HOST}
      - FDW_DB=${FDW_DB}
      - FDW_DATA_SCHEMA=${FDW_DATA_SCHEMA}
    depends_on:
      es01:
        condition: service_healthy
      i2b2-pg:
        condition: service_started
    volumes:
      - "./db/src:/docker-entrypoint-initdb.d"
    networks:
      - esnet
      - restnet
      - i2b2-net
    links:
      - i2b2-pg:i2b2-pg
      - es01:es01
  ### DB END

  # PostgREST instance, is responsible for communicating with the database
  # and providing a REST api, (almost) every request that is sent to the database goes through it
  postgrest:
    image: postgrest/postgrest:v9.0.0
    ports:
      - "3000:3000"
    links:
      - db:db
    environment:
      - PGRST_DB_URI=postgres://${DB_USER}:${DB_PASS}@${DB_HOST}:${DB_PORT}/${DB_NAME}
      - PGRST_DB_SCHEMA=${DB_SCHEMA} 
      - PGRST_DB_ANON_ROLE=${DB_ANON_ROLE}
      - PGRST_DB_POOL=${DB_POOL} 
      - PGRST_JWT_SECRET=${JWT_SECRET}  
      - PGRST_MAX_ROWS=${MAX_ROWS} 
      - PGRST_PRE_REQUEST=${PRE_REQUEST}
      - PGRST_SERVER_PROXY_URI=${SERVER_PROXY_URI}
      - PGRST_ROLE_CLAIM_KEY=${ROLE_CLAIM_KEY}
      - PGRST_OPENAPI_SERVER_PROXY_URI=${OPENAPI_SERVER_PROXY_URI}
    depends_on:
      - db
    networks:
      - restnet
      - httpnet

  # OpenResty (Nginx + Lua) instance that sits in front of PostgREST.
  # All the requests coming into the system are first hitting this component.
  # After some processing/checks and transformation, the request is forwarded
  # to PostgREST down the stack.
  openresty:
    image: openresty/openresty:stretch
    command: ["/usr/bin/openresty", "-g", "daemon off; error_log /dev/stderr info;"]
    ports:
      - "8080:80"
    links:
      - db:db
      - postgrest:postgrest
      - keycloak:keycloak
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - DEVELOPMENT=${DEVELOPMENT}
      - POSTGREST_HOST=${POSTGREST_HOST}
      - POSTGREST_PORT=${POSTGREST_PORT}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_SCHEMA=${DB_SCHEMA}
      - DB_USER=${DB_USER}
      - DB_PASS=${DB_PASS}
      # keycloak
      - KEYCLOAK_HOST=${KEYCLOAK_HOST}
      - KEYCLOAK_PORT=${KEYCLOAK_PORT}
      # env vars which are specially for zombo search
      - ZOMBO_SEARCH_MIN_TOKEN=${ZOMBO_SEARCH_MIN_TOKEN}
      - ZOMBO_MAX_RESULTS=${ZOMBO_MAX_RESULTS}
    volumes:
      - "./openresty/nginx:/usr/local/openresty/nginx/conf"
      - "./openresty/html:/usr/local/openresty/nginx/html"
      - "./openresty/lua:/usr/local/openresty/lualib/user_code"
    depends_on:
      - postgrest
      - keycloak
    networks:
      - httpnet

  # elastic search
  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.12
    environment:
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.watermark.low=1gb
      - cluster.routing.allocation.disk.watermark.high=512mb
      - cluster.routing.allocation.disk.watermark.flood_stage=256mb
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - esnet
    healthcheck:
      test: ["CMD-SHELL", "(curl --silent --fail es01:9200/_cluster/health | grep '\"status\":\"green\"') || exit 1"]
      interval: 30s
      timeout: 300s
      retries: 10

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.8.12
    environment:
      - cluster.name=docker-cluster
      - cluster.routing.allocation.disk.watermark.low=1gb
      - cluster.routing.allocation.disk.watermark.high=512mb
      - cluster.routing.allocation.disk.watermark.flood_stage=256mb
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.zen.ping.unicast.hosts=elasticsearch"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - es_data02:/usr/share/elasticsearch/data
    networks:
      - esnet

  keycloak:
    image: quay.io/keycloak/keycloak:12.0.4
    environment:
      - KEYCLOAK_IMPORT=/opt/jboss/keycloak/imports/realm-export.json -Dkeycloak.profile.feature.upload_scripts=enabled
      - KEYCLOAK_USER=${KEYCLOAK_ADMIN}
      - KEYCLOAK_PASSWORD=${KEYCLOAK_PASSWORD}
      - PROXY_ADDRESS_FORWARDING=true
      - DB_VENDOR=POSTGRES
      - DB_ADDR=keycloak-db
      - DB_DATABASE=keycloak
      - DB_USER=${KEYCLOAK_POSTGRES_USER}
      - DB_PASSWORD=${KEYCLOAK_POSTGRES_PASSWORD}
    volumes:
      - ./keycloak/imports:/opt/jboss/keycloak/imports
    depends_on:
      - keycloak-db
    networks:
      - httpnet
      - keycloaknet


  keycloak-db:
    restart: always
    image: postgres:13
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KEYCLOAK_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KEYCLOAK_POSTGRES_PASSWORD}
    volumes:
      - keycloak_pg_data:/var/lib/postgresql/data
    networks:
      - keycloaknet
      
  # i2b2 database with demo data
  i2b2-pg:
    ports:
      - "5433:5432"
    image: uklfr/i2b2-pg:${I2B2_VERSION_PG}
    environment:
      - POSTGRES_PASSWORD=${I2B2_PG_SUPER_USER_PASSWORD}
    volumes:
      - type: volume
        source: i2b2-pg-vol
        target: /var/lib/postgresql/data
    networks:
      - i2b2-net

volumes:
  es_data01:
    driver: local
  es_data02:
    driver: local
  keycloak_pg_data:
    driver: local
  i2b2-pg-vol:
    name: i2b2-pg-vol

networks:
  esnet:
  httpnet:
  restnet:
  keycloaknet:
  i2b2-net:
